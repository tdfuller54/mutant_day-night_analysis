import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import datetime as dt
import seaborn as sns

from operator import itemgetter

# pd.set_option('display.height', 500)
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 300)
np.set_printoptions(threshold=np.sys.maxsize)

data = pd.read_table("M:\\Lab\\Tyson\\Syne1b master folder\\mutant day-night data\\P22219 s1b-g d196 day-night assay"
                     "\\P22219 s1bg d196 day-night.XLS")



## convert sttime to datetime in python and use the timestamp.round function to round this to the nearest
##minute so we can use the hour value for day-night subsetting later


##this is in progress to fix error where midnight of last night keeps previous date and should go to new date
#data["stdt"] = data["stdate"].map(str) + " " + data["sttime"].map(str)
#data[["stdt"]].info()
#print(data["stdt"])
#data["stdt"] = pd.to_datetime(data["stdt"])
#data["stdt"] = data["stdt"].apply(lambda x: pd.Timestamp.round(x, 'min'))
##data[["stdt"]].info()
##print(data["stdt"])
data["sttime"] = pd.to_datetime(data["sttime"])
data["sttime"] = data["sttime"].apply(lambda x: pd.Timestamp.round(x, 'min'))
data["sttime"] = data["sttime"].apply(lambda x: x.time())
#data[["sttime"]].info()
#print(data["sttime"])

## Since the column is now a time object the hour and minute columns can be generated by calling
## datetime functions. This returns values as int64 type
data['hour'] = data['sttime'].apply(lambda x : x.hour)
data['minute'] = data['sttime'].apply(lambda x : x.minute)
##print(data[['stdate', 'sttime', 'hour', 'minute']])
##data[['hour','minute']].info()

## This method allows python to generate a list based on lines of a txt file to not manually type them all in
with open("M:\\Lab\\Tyson\\Syne1b master folder\\mutant day-night data\\"
          "P22219 s1b-g d196 day-night assay\\wt_wells.txt", "r") as WW:
    lines = WW.readlines()
    WT_wells = [l.strip() for l in lines if l.strip()]

with open("M:\\Lab\\Tyson\\Syne1b master folder\\mutant day-night data\\"
          "P22219 s1b-g d196 day-night assay\\het_wells.txt", "r") as HW:
    lines = HW.readlines()
    Het_wells = [l.strip() for l in lines if l.strip()]

with open("M:\\Lab\\Tyson\\Syne1b master folder\\mutant day-night data\\"
          "P22219 s1b-g d196 day-night assay\\mutant_wells.txt", "r") as MW:
   lines = MW.readlines()
   Mut_wells = [l.strip() for l in lines if l.strip()]


#print (WT_wells)
#print(Mut_wells)
#print(Het_wells)

## This is modifying Anthony's example code some to work off the animal column or actual well number to group
## larvae by genotype
data['group'] = data['animal'].apply(lambda x: "WT" if x in WT_wells else "mut" if x in Mut_wells else
                                     "het" if x in Het_wells else "NA")

##Using example from Anthony will now remove all unnecessary columns using appropriate column names
data = data[['animal', 'group', 'start', 'end', 'actinteg', 'stdate', 'sttime', 'hour', 'minute']]
#print(data)




##Use Anthony's example to group by day, treatment group, hour, then minute and apply mean over the groupings
## This will get average activity values for each minute but still will want to separate by each night and day later on
## This also drops the NA group of genotypes for clarity when graphing
grouped = data.groupby(['stdate','group', 'hour', 'minute'], as_index=False).mean()
grouped = grouped[grouped.group != "NA"]

##This generates columns grouping data into 10, 20, 30, and 60 minute intervals to use for graphing
grouped['range1'] = pd.cut(grouped.end, list(range(0, 237900, 600)), labels=range(1, len(list(range(0, 237900, 600)))))
grouped['range2'] = pd.cut(grouped.end, list(range(0, 237900, 1200)), labels=range(1, len(list(range(0, 237900, 1200)))))
grouped['range3'] = pd.cut(grouped.end, list(range(0, 237900, 1800)), labels=range(1, len(list(range(0, 237900, 1800)))))
grouped['range4'] = pd.cut(grouped.end, list(range(0, 237900, 3600)), labels=range(1, len(list(range(0, 237900, 3600)))))
print(grouped)
## From Anthony quickly visualize the data to see if any trends
sns.set_context("talk")
# plt.figure(figsize=(8,6))
g1 = sns.FacetGrid(data=grouped, hue="group", height=6, dropna=True)
g1.map(sns.lineplot, "range1", "actinteg", linewidth=0.25)
g1.set_axis_labels('10 Minute Intervals', 'Activity')
sns.despine()
plt.legend()
g2 = sns.FacetGrid(data=grouped, hue="group", height=6, dropna=True)
g2.map(sns.lineplot, "range2", "actinteg", linewidth=0.25)
g2.set_axis_labels('20 Minute Intervals', 'Activity')
sns.despine()
plt.legend()
g3 = sns.FacetGrid(data=grouped, hue="group", height=6, dropna=True)
g3.map(sns.lineplot, "range3", "actinteg", linewidth=0.25)
g3.set_axis_labels('30 Minute Intervals', 'Activity')
sns.despine()
plt.legend()
g4 = sns.FacetGrid(data=grouped, hue="group", height=6, dropna=True)
g4.map(sns.lineplot, "range4", "actinteg", linewidth=0.25)
g4.set_axis_labels('1 Hour Intervals', 'Activity')
sns.despine()
plt.legend()
plt.show()

##get area under curve for each fish
WT_night4_area = WT_night4.groupby('animal', as_index=True)['actinteg'].agg(np.trapz)
WT_day5_area = WT_day5.groupby('animal', as_index=True)['actinteg'].agg(np.trapz)
WT_night5_area = WT_night5.groupby('animal', as_index=True)['actinteg'].agg(np.trapz)




##do t test and mann whitney test comparing days and nights of area under curve each group
print("stats for WTvlg night 4")
print(stats.mannwhitneyu(WT_night4_area, lg_night4_area))


print("stats for WTvsh night 4")
print(stats.mannwhitneyu(WT_night4_area, sh_night4_area))


# data taking total movement for each fish during each period


## generate box and whisker plots to show the values for area under the curve, total movement, and ave movement per min


plt.figure(1)
night4_area = [WT_night4_area, lg_night4_area, sh_night4_area]
plt.boxplot(night4_area, whis=[5, 95], labels=["WT", "lg", "sh"], positions=[1, 2, 3], widths=0.5)
plt.xlim(0.25, 3.75)
plt.title("Area Under the Curve Night 4")

plt.figure(2)
day5_area = [WT_day5_area, lg_day5_area, sh_day5_area]
plt.boxplot(day5_area, whis=[5, 95], labels=["WT", "lg", "sh"], positions=[1, 2, 3], widths=0.5)
plt.xlim(0.25, 3.75)
plt.title("Area Under the Curve Day 5")

